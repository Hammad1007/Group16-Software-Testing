"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const expect_1 = __importDefault(require("expect"));
const ExpectWrapper = {
    assertEqual(a, b) {
        return __awaiter(this, void 0, void 0, function* () {
            return expect_1.default(a).toEqual(b);
        });
    },
    assertNotEqual(a, b) {
        return __awaiter(this, void 0, void 0, function* () {
            return expect_1.default(a).not.toEqual(b);
        });
    },
    assertContain(a, b) {
        return __awaiter(this, void 0, void 0, function* () {
            return expect_1.default(a).toContain(b);
        });
    },
    assertGreaterThan(a, b) {
        return __awaiter(this, void 0, void 0, function* () {
            return expect_1.default(a).toBeGreaterThan(b);
        });
    },
    assertNotEmpty(a) {
        return __awaiter(this, void 0, void 0, function* () {
            return expect_1.default(a).not.toEqual('');
        });
    },
    assertToBeTrue(a) {
        return __awaiter(this, void 0, void 0, function* () {
            return expect_1.default(a).toBeTruthy();
        });
    },
    assertToBeFalse(a) {
        return __awaiter(this, void 0, void 0, function* () {
            return expect_1.default(a).toBeFalsy();
        });
    },
    assertNotContain(a, b) {
        return __awaiter(this, void 0, void 0, function* () {
            return expect_1.default(a).not.toContain(b);
        });
    },
};
exports.default = ExpectWrapper;
//# sourceMappingURL=index.js.map